codes_ac_luma = [
    ("1010", 0x00),
    ("00", 0x01),
    ("01", 0x02),
    ("100", 0x03),
    ("1011", 0x04),
    ("11010", 0x05),
    ("1111000", 0x06),
    ("11111000", 0x07),
    ("1111110110", 0x08),
    ("1111111110000010", 0x09),
    ("1111111110000011", 0x0A),
    ("1100", 0x11),
    ("11011", 0x12),
    ("1111001", 0x13),
    ("111110110", 0x14),
    ("11111110110", 0x15),
    ("1111111110000100", 0x16),
    ("1111111110000101", 0x17),
    ("1111111110000110", 0x18),
    ("1111111110000111", 0x19),
    ("1111111110001000", 0x1A),
    ("11100", 0x21),
    ("11111001", 0x22),
    ("1111110111", 0x23),
    ("111111110100", 0x24),
    ("1111111110001001", 0x25),
    ("1111111110001010", 0x26),
    ("1111111110001011", 0x27),
    ("1111111110001100", 0x28),
    ("1111111110001101", 0x29),
    ("1111111110001110", 0x2A),
    ("111010", 0x31),
    ("111110111", 0x32),
    ("111111110101", 0x33),
    ("1111111110001111", 0x34),
    ("1111111110010000", 0x35),
    ("1111111110010001", 0x36),
    ("1111111110010010", 0x37),
    ("1111111110010011", 0x38),
    ("1111111110010100", 0x39),
    ("1111111110010101", 0x3A),
    ("111011", 0x41),
    ("1111111000", 0x42),
    ("1111111110010110", 0x43),
    ("1111111110010111", 0x44),
    ("1111111110011000", 0x45),
    ("1111111110011001", 0x46),
    ("1111111110011010", 0x47),
    ("1111111110011011", 0x48),
    ("1111111110011100", 0x49),
    ("1111111110011101", 0x4A),
    ("1111010", 0x51),
    ("11111110111", 0x52),
    ("1111111110011110", 0x53),
    ("1111111110011111", 0x54),
    ("1111111110100000", 0x55),
    ("1111111110100001", 0x56),
    ("1111111110100010", 0x57),
    ("1111111110100011", 0x58),
    ("1111111110100100", 0x59),
    ("1111111110100101", 0x5A),
    ("1111011", 0x61),
    ("111111110110", 0x62),
    ("1111111110100110", 0x63),
    ("1111111110100111", 0x64),
    ("1111111110101000", 0x65),
    ("1111111110101001", 0x66),
    ("1111111110101010", 0x67),
    ("1111111110101011", 0x68),
    ("1111111110101100", 0x69),
    ("1111111110101101", 0x6A),
    ("11111010", 0x71),
    ("111111110111", 0x72),
    ("1111111110101110", 0x73),
    ("1111111110101111", 0x74),
    ("1111111110110000", 0x75),
    ("1111111110110001", 0x76),
    ("1111111110110010", 0x77),
    ("1111111110110011", 0x78),
    ("1111111110110100", 0x79),
    ("1111111110110101", 0x7A),
    ("111111000", 0x81),
    ("111111111000000", 0x82),
    ("1111111110110110", 0x83),
    ("1111111110110111", 0x84),
    ("1111111110111000", 0x85),
    ("1111111110111001", 0x86),
    ("1111111110111010", 0x87),
    ("1111111110111011", 0x88),
    ("1111111110111100", 0x89),
    ("1111111110111101", 0x8A),
    ("111111001", 0x91),
    ("1111111110111110", 0x92),
    ("1111111110111111", 0x93),
    ("1111111111000000", 0x94),
    ("1111111111000001", 0x95),
    ("1111111111000010", 0x96),
    ("1111111111000011", 0x97),
    ("1111111111000100", 0x98),
    ("1111111111000101", 0x99),
    ("1111111111000110", 0x9A),
    ("111111010", 0xA1),
    ("1111111111000111", 0xA2),
    ("1111111111001000", 0xA3),
    ("1111111111001001", 0xA4),
    ("1111111111001010", 0xA5),
    ("1111111111001011", 0xA6),
    ("1111111111001100", 0xA7),
    ("1111111111001101", 0xA8),
    ("1111111111001110", 0xA9),
    ("1111111111001111", 0xAA),
    ("1111111001", 0xB1),
    ("1111111111010000", 0xB2),
    ("1111111111010001", 0xB3),
    ("1111111111010010", 0xB4),
    ("1111111111010011", 0xB5),
    ("1111111111010100", 0xB6),
    ("1111111111010101", 0xB7),
    ("1111111111010110", 0xB8),
    ("1111111111010111", 0xB9),
    ("1111111111011000", 0xBA),
    ("1111111010", 0xC1),
    ("1111111111011001", 0xC2),
    ("1111111111011010", 0xC3),
    ("1111111111011011", 0xC4),
    ("1111111111011100", 0xC5),
    ("1111111111011101", 0xC6),
    ("1111111111011110", 0xC7),
    ("1111111111011111", 0xC8),
    ("1111111111100000", 0xC9),
    ("1111111111100001", 0xCA),
    ("11111111000", 0xD1),
    ("1111111111100010", 0xD2),
    ("1111111111100011", 0xD3),
    ("1111111111100100", 0xD4),
    ("1111111111100101", 0xD5),
    ("1111111111100110", 0xD6),
    ("1111111111100111", 0xD7),
    ("1111111111101000", 0xD8),
    ("1111111111101001", 0xD9),
    ("1111111111101010", 0xDA),
    ("1111111111101011", 0xE1),
    ("1111111111101100", 0xE2),
    ("1111111111101101", 0xE3),
    ("1111111111101110", 0xE4),
    ("1111111111101111", 0xE5),
    ("1111111111110000", 0xE6),
    ("1111111111110001", 0xE7),
    ("1111111111110010", 0xE8),
    ("1111111111110011", 0xE9),
    ("1111111111110100", 0xEA),
    ("11111111001", 0xF0),
    ("1111111111110101", 0xF1),
    ("1111111111110110", 0xF2),
    ("1111111111110111", 0xF3),
    ("1111111111111000", 0xF4),
    ("1111111111111001", 0xF5),
    ("1111111111111010", 0xF6),
    ("1111111111111011", 0xF7),
    ("1111111111111100", 0xF8),
    ("1111111111111101", 0xF9),
    ("1111111111111110", 0xFA),
]

codes_ac_chroma = [
    ("00", 0x00),
    ("01", 0x01),
    ("100", 0x02),
    ("1010", 0x03),
    ("11000", 0x04),
    ("11001", 0x05),
    ("111000", 0x06),
    ("1111000", 0x07),
    ("111110100", 0x08),
    ("1111110110", 0x09),
    ("111111110100", 0x0A),
    ("1011", 0x11),
    ("111001", 0x12),
    ("11110110", 0x13),
    ("111110101", 0x14),
    ("11111110110", 0x15),
    ("111111110101", 0x16),
    ("1111111110001000", 0x17),
    ("1111111110001001", 0x18),
    ("1111111110001010", 0x19),
    ("1111111110001011", 0x1A),
    ("11010", 0x21),
    ("11110111", 0x22),
    ("1111110111", 0x23),
    ("111111110110", 0x24),
    ("111111111000010", 0x25),
    ("1111111110001100", 0x26),
    ("1111111110001101", 0x27),
    ("1111111110001110", 0x28),
    ("1111111110001111", 0x29),
    ("1111111110010000", 0x2A),
    ("11011", 0x31),
    ("11111000", 0x32),
    ("1111111000", 0x33),
    ("111111110111", 0x34),
    ("1111111110010001", 0x35),
    ("1111111110010010", 0x36),
    ("1111111110010011", 0x37),
    ("1111111110010100", 0x38),
    ("1111111110010101", 0x39),
    ("1111111110010110", 0x3A),
    ("111010", 0x41),
    ("111110110", 0x42),
    ("1111111110010111", 0x43),
    ("1111111110011000", 0x44),
    ("1111111110011001", 0x45),
    ("1111111110011010", 0x46),
    ("1111111110011011", 0x47),
    ("1111111110011100", 0x48),
    ("1111111110011101", 0x49),
    ("1111111110011110", 0x4A),
    ("111011", 0x51),
    ("1111111001", 0x52),
    ("1111111110011111", 0x53),
    ("1111111110100000", 0x54),
    ("1111111110100001", 0x55),
    ("1111111110100010", 0x56),
    ("1111111110100011", 0x57),
    ("1111111110100100", 0x58),
    ("1111111110100101", 0x59),
    ("1111111110100110", 0x5A),
    ("1111001", 0x61),
    ("11111110111", 0x62),
    ("1111111110100111", 0x63),
    ("1111111110101000", 0x64),
    ("1111111110101001", 0x65),
    ("1111111110101010", 0x66),
    ("1111111110101011", 0x67),
    ("1111111110101100", 0x68),
    ("1111111110101101", 0x69),
    ("1111111110101110", 0x6A),
    ("1111010", 0x71),
    ("11111111000", 0x72),
    ("1111111110101111", 0x73),
    ("1111111110110000", 0x74),
    ("1111111110110001", 0x75),
    ("1111111110110010", 0x76),
    ("1111111110110011", 0x77),
    ("1111111110110100", 0x78),
    ("1111111110110101", 0x79),
    ("1111111110110110", 0x7A),
    ("11111001", 0x81),
    ("1111111110110111", 0x82),
    ("1111111110111000", 0x83),
    ("1111111110111001", 0x84),
    ("1111111110111010", 0x85),
    ("1111111110111011", 0x86),
    ("1111111110111100", 0x87),
    ("1111111110111101", 0x88),
    ("1111111110111110", 0x89),
    ("1111111110111111", 0x8A),
    ("111110111", 0x91),
    ("1111111111000000", 0x92),
    ("1111111111000001", 0x93),
    ("1111111111000010", 0x94),
    ("1111111111000011", 0x95),
    ("1111111111000100", 0x96),
    ("1111111111000101", 0x97),
    ("1111111111000110", 0x98),
    ("1111111111000111", 0x99),
    ("1111111111001000", 0x9A),
    ("111111000", 0xA1),
    ("1111111111001001", 0xA2),
    ("1111111111001010", 0xA3),
    ("1111111111001011", 0xA4),
    ("1111111111001100", 0xA5),
    ("1111111111001101", 0xA6),
    ("1111111111001110", 0xA7),
    ("1111111111001111", 0xA8),
    ("1111111111010000", 0xA9),
    ("1111111111010001", 0xAA),
    ("111111001", 0xB1),
    ("1111111111010010", 0xB2),
    ("1111111111010011", 0xB3),
    ("1111111111010100", 0xB4),
    ("1111111111010101", 0xB5),
    ("1111111111010110", 0xB6),
    ("1111111111010111", 0xB7),
    ("1111111111011000", 0xB8),
    ("1111111111011001", 0xB9),
    ("1111111111011010", 0xBA),
    ("111111010", 0xC1),
    ("1111111111011011", 0xC2),
    ("1111111111011100", 0xC3),
    ("1111111111011101", 0xC4),
    ("1111111111011110", 0xC5),
    ("1111111111011111", 0xC6),
    ("1111111111100000", 0xC7),
    ("1111111111100001", 0xC8),
    ("1111111111100010", 0xC9),
    ("1111111111100011", 0xCA),
    ("11111111001", 0xD1),
    ("1111111111100100", 0xD2),
    ("1111111111100101", 0xD3),
    ("1111111111100110", 0xD4),
    ("1111111111100111", 0xD5),
    ("1111111111101000", 0xD6),
    ("1111111111101001", 0xD7),
    ("1111111111101010", 0xD8),
    ("1111111111101011", 0xD9),
    ("1111111111101100", 0xDA),
    ("11111111100000", 0xE1),
    ("1111111111101101", 0xE2),
    ("1111111111101110", 0xE3),
    ("1111111111101111", 0xE4),
    ("1111111111110000", 0xE5),
    ("1111111111110001", 0xE6),
    ("1111111111110010", 0xE7),
    ("1111111111110011", 0xE8),
    ("1111111111110100", 0xE9),
    ("1111111111110101", 0xEA),
    ("1111111010", 0xF0),
    ("111111111000011", 0xF1),
    ("1111111111110110", 0xF2),
    ("1111111111110111", 0xF3),
    ("1111111111111000", 0xF4),
    ("1111111111111001", 0xF5),
    ("1111111111111010", 0xF6),
    ("1111111111111011", 0xF7),
    ("1111111111111100", 0xF8),
    ("1111111111111101", 0xF9),
    ("1111111111111110", 0xFA),
]

codes2 = [
    ("00", 1),
    ("01", 2),
    ("101", 3),
    ("100", 4),
    ("1100", 6),
    ("1101", 7),
    ("1110", 8),
    ("1111", 9),
]

codes_dc_luma = [
    ("00", 0),
    ("010", 1),
    ("011", 2),
    ("100", 3),
    ("101", 4),
    ("110", 5),
    ("1110", 6),
    ("11110", 7),
    ("111110", 8),
    ("1111110", 9),
    ("11111110", 10),
    ("111111110", 11),
]

codes_dc_chroma = [
    ("00", 0),
    ("01", 1),
    ("10", 2),
    ("110", 3),
    ("1110", 4),
    ("11110", 5),
    ("111110", 6),
    ("1111110", 7),
    ("11111110", 8),
    ("111111110", 9),
    ("1111111110", 10),
    ("11111111110", 11),
]


class TreeNode:
    pos = 0

    def __init__(self, b0, b1, leaf=None):
        self.b0 = b0
        self.b1 = b1
        self.leaf = leaf


def treenodes(codelist):
    # print(codelist)
    if len(codelist) == 0:
        return TreeNode(None, None, 0)
    b0 = []
    b1 = []
    for code in codelist:
        if len(code[0]) == 0:
            # print("leaf")
            return TreeNode(None, None, code[1])
        if code[0][0] == '0':
            b0.append((code[0][1:], code[1]))
        else:
            b1.append((code[0][1:], code[1]))
    return TreeNode(treenodes(b0), treenodes(b1))


def gen_decoder(codelist):
    root = treenodes(codelist)
    nodes = [root]
    flat = []
    while len(nodes) > 0:
        newnodes = []
        for node in nodes:
            if node.leaf is None:
                node.pos = len(flat)
                flat.append(node)
            if node.b0 is not None:
                newnodes.append(node.b0)
            if node.b1 is not None:
                newnodes.append(node.b1)
        nodes = newnodes

    # for node in flat:
    #    print(node.pos, node.leaf, node.b0, node.b1)

    coded = []
    for item in flat:
        citem = [0, 0]
        if item.b0 is None:
            citem[0] = 0
        elif item.b0.leaf is None:
            citem[0] = item.b0.pos - item.pos
        else:
            citem[0] = -item.b0.leaf

        if item.b1 is None:
            citem[1] = 0
        elif item.b1.leaf is None:
            citem[1] = item.b1.pos - item.pos
        else:
            citem[1] = -item.b1.leaf

        coded.append(citem)

    print(len(coded))
    print(coded)
    # for node in coded:
    #    print(node, ",")


def gen_encoder(codelist, max=-1):
    count = 0
    if max > 0:
        count = max
    else:
        for item in codelist:
            if item[1] > count:
                count = item[1]
        count += 1
    print(count)

    sorted = [['-1'] * 16] * count

    for item in codelist:
        bits = [*item[0]]
        bits.extend(['-1'] * (16 - len(item[0])))
        sorted[item[1]] = bits
    # print(sorted)

    for item in sorted:
        print("[{}],".format(", ".join(item)))


def gen_encoder_size(codelist, max=-1):
    count = 0
    if max > 0:
        count = max
    else:
        for item in codelist:
            if item[1] > count:
                count = item[1]
        count += 1
    print(count)

    sorted = [0] * count

    for item in codelist:
        sorted[item[1]] = len(item[0])
    # print(sorted)

    print(", ".join([str(a) for a in sorted]))


# gen_encoder(codes_ac_chroma, max=256)
# gen_decoder(codes_ac_chroma)
gen_encoder_size(codes_ac_chroma, 256)
